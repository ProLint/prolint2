[build-system]
requires = ["setuptools>=45", "wheel", "versioneer[toml]"]
build-backend = "setuptools.build_meta"

[project]
name = "prolint2"
dynamic = ["version"]
description = "Protein-Lipid Interaction Analysis Tool"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Daniel P. Ramirez", email = "daniel.ramirez@ucalgary.ca"},
    {name = "Besian I. Sejdiu", email = "besian.sejdiu@ucalgary.ca"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Chemistry",
]
keywords = ["molecular dynamics", "lipids", "proteins", "bioinformatics"]
requires-python = ">=3.10"
dependencies = [
    "MDAnalysis>=2.0.0",
    "numpy>=1.20.0",
    "scipy>=1.7.0",
    "matplotlib>=3.3.0",
    "pandas>=1.3.0",
    "requests>=2.25.0",
    "tqdm>=4.60.0",
    "psutil>=5.8.0",
]

[project.optional-dependencies]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.12",
    "pytest-mock>=3.6",
    "pytest-xdist>=2.3",
    "pytest-benchmark>=5.0",
    "coverage[toml]>=5.5",
]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.12",
    "pytest-mock>=3.6",
    "pytest-xdist>=2.3",
    "pytest-benchmark>=5.0",
    "coverage[toml]>=5.5",
    "black>=21.0",
    "isort>=5.9",
    "flake8>=3.9",
    "mypy>=0.910",
    "pre-commit>=2.13",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=0.5",
    "nbsphinx>=0.8",
    "jupyter>=1.0",
]

[project.urls]
Homepage = "https://github.com/ProLint/prolint2"
Documentation = "https://prolint2.readthedocs.io"
Repository = "https://github.com/ProLint/prolint2"
Issues = "https://github.com/ProLint/prolint2/issues"

[project.scripts]
prolint2 = "prolint2.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["prolint2*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
prolint2 = ["data/**/*", "config/*.ini"]

[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "prolint2/_version.py"
versionfile_build = "prolint2/_version.py"
tag_prefix = "v"
parentdir_prefix = "prolint2-"

# Testing configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=prolint2",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["prolint2/tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "requires_data: marks tests that require sample data",
    "benchmark: marks tests as benchmark tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["prolint2"]
omit = [
    "prolint2/tests/*",
    "prolint2/_version.py",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["prolint2"]

# Type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "MDAnalysis.*",
    "matplotlib.*",
    "scipy.*",
    "tqdm.*",
    "psutil.*",
]
ignore_missing_imports = true
