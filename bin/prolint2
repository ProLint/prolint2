#!/usr/bin/env python3
r"""Argument parser to use prolint2 from the command-line
======================================================
:Authors: Daniel P. Ramirez & Besian I. Sejdiu
:Year: 2022
:Copyright: MIT License
"""
import pickle

import pathlib
import typer
from typing_extensions import Annotated
from typer.core import TyperGroup
from click import Context
import configparser

from prolint2 import get_config
import prolint2._version as vers
from prolint2.server.server import ProLintDashboard
from prolint2.core.universe import Universe


# Getting the config file
config = configparser.ConfigParser(allow_no_value=True)
config.read(get_config())
parameters_config = config["Parameters"]

# fixing order of commands
class OrderCommands(TyperGroup):
  def list_commands(self, ctx: Context):
    """Return list of commands in the order appear."""
    return list(self.commands)    # get commands using self.commands

# Creating the parser
prolint2 = typer.Typer(
    help="[blue]Command-line version of the ProLint v.2 library.[/blue] :sparkles:",
    epilog="[blue]Have fun analyzing lipid-protein interactions![/blue] :stuck_out_tongue_winking_eye:",
    rich_markup_mode="rich", 
    add_completion=False,
    cls=OrderCommands,
    )

# creating the run command
@prolint2.command(epilog="[blue]Have fun analyzing lipid-protein interactions![/blue] :stuck_out_tongue_winking_eye:")
def run(
        structure: Annotated[pathlib.Path, typer.Argument(show_default=False, help='path to the structure/topology file (E.g.: "coordinates.gro").')], 
        trajectory: Annotated[pathlib.Path, typer.Argument(show_default=False, help='path to the trajectory file (E.g.: "trajectory.xtc").')],
        contacts: Annotated[pathlib.Path, typer.Argument(show_default=False, help='path to export the results to a file (E.g.: "contacts.csv").')],
        cutoff: Annotated[float, typer.Option(show_default=True, help="cutoff distance to calculate lipid-protein interactions (in angstroms).")]=7,
         ):
    """[blue]ProLint v.2: Running calculation of lipid-protein interactions at a certain cutoff.[/blue] :sparkles:"""
    System = Universe(structure, trajectory)
    SystemContacts = System.compute_contacts(cutoff=cutoff)
    df = SystemContacts.create_dataframe(System.trajectory.n_frames)

    # save contacts to Pandas dataframe
    df.to_csv(contacts)

    
        
# creating the dashboard command
@prolint2.command(epilog="[blue]Have fun analyzing lipid-protein interactions![/blue] :stuck_out_tongue_winking_eye:")
def dashboard(
        structure: Annotated[pathlib.Path, typer.Argument(show_default=False, help='path to the structure/topology file (E.g.: "coordinates.gro").')], 
        trajectory: Annotated[pathlib.Path, typer.Argument(show_default=False, help='path to the trajectory file (E.g.: "trajectory.xtc").')],
        contacts: Annotated[pathlib.Path, typer.Argument(show_default=False, help='path to import the results from a file (E.g.: "contacts.csv").')], 
         ):
    """[blue]ProLint v.2: Launching interactive dashboard to explore the results of lipid-protein interactions.[/blue] :sparkles:"""
    # Starting the server
    app = ProLintDashboard()
    app.start_server(payload={
        'structure': structure, 
        'trajectory': trajectory, 
        'contacts': contacts, 
        })
    import sys
    sys.exit()

@prolint2.command(epilog="[blue]Have fun analyzing lipid-protein interactions![/blue] :stuck_out_tongue_winking_eye:")
def plot(
        contacts: Annotated[pathlib.Path, typer.Argument(show_default=False, help='path to the structure/topology file (E.g.: "coordinates.gro").')], 
         ):
    """[blue]ProLint v.2: Plotting paper quality graphs to visualize lipid-protein interactions.[/blue] :sparkles:"""


if __name__ == "__main__":
    prolint2()

