#!/usr/bin/env python3
r"""Argument parser to use ufcc from the command-line
======================================================
:Authors: Daniel P. Ramirez & Besian I. Sejdiu
:Year: 2022
:Copyright: MIT License
"""

import argparse
import ufcc._version as vers
from ufcc import UFCC
from ufcc.interactive_sel import interactive_selection
import warnings
from ufcc.server.server import start_server

# Creating the parser
ufcc_parser = argparse.ArgumentParser(
    prog="ufcc",
    #   usage='%(prog)s [optional-arguments] structure_file trajectory_file',
    description="Argument parser to use the ufcc library directly from the command-line.",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    epilog="Have fun getting lipid-protein contacts! :)\n",
)

ufcc_parser.version = vers.get_versions()["version"]

# positional arguments
ufcc_parser.add_argument(
    "structure", action="store", type=str, help="path to the structure/topology file."
)
ufcc_parser.add_argument(
    "trajectory", action="store", type=str, help="path to the trajectory file."
)


# optional arguments
ufcc_parser.add_argument("-v", "--version", action="version")
ufcc_parser.add_argument(
    "-c",
    "--cutoff",
    metavar="",
    type=int,
    help="distance cutoff to get the contacts (in angstroms).",
    default=7,
    dest="cutoff",
)
ufcc_parser.add_argument(
    "-al",
    "--add_lipid_types",
    metavar="",
    type=list,
    help="additional lipid types to be included in the membrane group, supported lipid types are POPC, DPPC, DOPC, CHOL, CHL1, POPS and POPE.",
    default=[],
    dest="other_lipids",
)
ufcc_parser.add_argument(
    "-i",
    "--interactive",
    metavar="",
    action="store_const",
    help="interactive selection of the groups for the calculation of the contacts.",
    default=False,
    const=True,
    dest="i_bool",
)

# Executing the parse_args() method
args = ufcc_parser.parse_args()

# print("args", type(args), args)
start_server(payload=args, reloader=False, i_bool=args.i_bool)
import sys
sys.exit()

# Dealing with the MDAnalysis warnings, especially the ones about the mass, as this is quite common when loading Martini systems.
mass_flag = 0
mass_list = []
with warnings.catch_warnings(record=True) as w:
    target_system = UFCC(
        args.structure, args.trajectory, add_lipid_types=args.other_lipids
    )
    for warn in w:
        syl = str(warn.message).split()
        if syl[:5] == ["Failed", "to", "guess", "the", "mass"]:
            mass_flag = +1
            mass_list.append(syl[-1])
        else:
            print(warn.message)
    if mass_flag > 0:
        mass_warn = "Warning: Please be aware that UFCC could NOT guess the mass for the following atomtypes: {}. If you are using Martini or you are sure that this is not due to an error in your system you can ignore this message.".format(
            ", ".join(mass_list)
        )
        print(mass_warn)

# For interactive selection of the groups for the contacts calculation
if args.i_bool:
    target_system = interactive_selection(target_system)

print("\n########### Starting calculation ##########")
print(
    "\n1- Getting the contacts between the groups over the frames in the trajectory:"
)
payload = target_system.contacts.server_payload()

print("\n################### Done! ##################")


# payload = target_system.contacts.server_payload()
# TODO:
# for the backend to carry out the calculations, the payload
# has to include file paths + ufcc options. And it should be checked
# very early on.
start_server(payload=payload, reloader=False, i_bool=False)